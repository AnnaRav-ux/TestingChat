package aquarium;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

/**
 * –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã "–ê–∫–≤–∞—Ä–∏—É–º"
 */
public class AquariumGUI extends JFrame {
    private Aquarium aquarium;
    private JTextArea infoArea;
    private JList<String> fishList;
    private JList<String> equipmentList;
    private DefaultListModel<String> fishListModel;
    private DefaultListModel<String> equipmentListModel;
    
    public AquariumGUI() {
        initializeAquarium();
        initializeGUI();
        setupEventHandlers();
        refreshDisplay();
    }
    
    private void initializeAquarium() {
        // –°–æ–∑–¥–∞–µ–º –∞–∫–≤–∞—Ä–∏—É–º —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        aquarium = new Aquarium("–ú–æ–π –¥–æ–º–∞—à–Ω–∏–π –∞–∫–≤–∞—Ä–∏—É–º", 100.0, "–ì–æ—Å—Ç–∏–Ω–∞—è");
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä—ã–± –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        aquarium.addFish(new TropicalFish("–ù–µ–º–æ", "–ö–ª–æ—É–Ω", 6, 8.5, "—Å–æ–ª–µ–Ω–∞—è", 26));
        aquarium.addFish(new TropicalFish("–î–æ—Ä–∏", "–•–∏—Ä—É—Ä–≥", 8, 12.0, "—Å–æ–ª–µ–Ω–∞—è", 25));
        aquarium.addFish(new Goldfish("–ó–æ–ª–æ—Ç–∫–æ", "–ó–æ–ª–æ—Ç–∞—è —Ä—ã–±–∫–∞", 24, 15.0, "–∑–æ–ª–æ—Ç–æ–π", true));
        aquarium.addFish(new Goldfish("–†—ã–∂–∏–∫", "–û–±—ã—á–Ω–∞—è —Ä—ã–±–∫–∞", 12, 10.0, "–æ—Ä–∞–Ω–∂–µ–≤—ã–π", false));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
        aquarium.addEquipment(new Equipment("–§–∏–ª—å—Ç—Ä AquaClear", "–§–∏–ª—å—Ç—Ä", true, 15.0));
        aquarium.addEquipment(new Equipment("–û–±–æ–≥—Ä–µ–≤–∞—Ç–µ–ª—å Tetra", "–û–±–æ–≥—Ä–µ–≤–∞—Ç–µ–ª—å", true, 50.0));
        aquarium.addEquipment(new Equipment("–ü–æ–º–ø–∞ Eheim", "–ü–æ–º–ø–∞", false, 25.0));
    }
    
    private void initializeGUI() {
        setTitle("üê† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ê–∫–≤–∞—Ä–∏—É–º–æ–º üê†");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(1200, 800);
        setLocationRelativeTo(null);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Look and Feel
        try {
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        createMenuBar();
        
        // –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
        JPanel mainPanel = new JPanel(new BorderLayout(10, 10));
        mainPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        
        // –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        JPanel leftPanel = createControlPanel();
        
        // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        JPanel centerPanel = createInfoPanel();
        
        // –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å–ø–∏—Å–∫–∏
        JPanel rightPanel = createListsPanel();
        
        mainPanel.add(leftPanel, BorderLayout.WEST);
        mainPanel.add(centerPanel, BorderLayout.CENTER);
        mainPanel.add(rightPanel, BorderLayout.EAST);
        
        add(mainPanel);
    }
    
    private void createMenuBar() {
        JMenuBar menuBar = new JMenuBar();
        
        // –ú–µ–Ω—é "–§–∞–π–ª"
        JMenu fileMenu = new JMenu("–§–∞–π–ª");
        JMenuItem newAquariumItem = new JMenuItem("–ù–æ–≤—ã–π –∞–∫–≤–∞—Ä–∏—É–º");
        JMenuItem exitItem = new JMenuItem("–í—ã—Ö–æ–¥");
        
        newAquariumItem.addActionListener(e -> createNewAquarium());
        exitItem.addActionListener(e -> System.exit(0));
        
        fileMenu.add(newAquariumItem);
        fileMenu.addSeparator();
        fileMenu.add(exitItem);
        
        // –ú–µ–Ω—é "–†—ã–±—ã"
        JMenu fishMenu = new JMenu("–†—ã–±—ã");
        JMenuItem addTropicalItem = new JMenuItem("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–æ–ø–∏—á–µ—Å–∫—É—é —Ä—ã–±—É");
        JMenuItem addGoldfishItem = new JMenuItem("–î–æ–±–∞–≤–∏—Ç—å –∑–æ–ª–æ—Ç—É—é —Ä—ã–±–∫—É");
        JMenuItem removeFishItem = new JMenuItem("–£–¥–∞–ª–∏—Ç—å —Ä—ã–±—É");
        
        addTropicalItem.addActionListener(e -> showAddTropicalFishDialog());
        addGoldfishItem.addActionListener(e -> showAddGoldfishDialog());
        removeFishItem.addActionListener(e -> removeSelectedFish());
        
        fishMenu.add(addTropicalItem);
        fishMenu.add(addGoldfishItem);
        fishMenu.addSeparator();
        fishMenu.add(removeFishItem);
        
        // –ú–µ–Ω—é "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"
        JMenu equipmentMenu = new JMenu("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ");
        JMenuItem addEquipmentItem = new JMenuItem("–î–æ–±–∞–≤–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ");
        JMenuItem removeEquipmentItem = new JMenuItem("–£–¥–∞–ª–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ");
        JMenuItem toggleEquipmentItem = new JMenuItem("–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å");
        
        addEquipmentItem.addActionListener(e -> showAddEquipmentDialog());
        removeEquipmentItem.addActionListener(e -> removeSelectedEquipment());
        toggleEquipmentItem.addActionListener(e -> toggleSelectedEquipment());
        
        equipmentMenu.add(addEquipmentItem);
        equipmentMenu.addSeparator();
        equipmentMenu.add(removeEquipmentItem);
        equipmentMenu.add(toggleEquipmentItem);
        
        // –ú–µ–Ω—é "–ü–æ–º–æ—â—å"
        JMenu helpMenu = new JMenu("–ü–æ–º–æ—â—å");
        JMenuItem aboutItem = new JMenuItem("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ");
        JMenuItem validateItem = new JMenuItem("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤–æ—Å—Ç—å");
        
        aboutItem.addActionListener(e -> showAboutDialog());
        validateItem.addActionListener(e -> validateConsistency());
        
        helpMenu.add(validateItem);
        helpMenu.addSeparator();
        helpMenu.add(aboutItem);
        
        menuBar.add(fileMenu);
        menuBar.add(fishMenu);
        menuBar.add(equipmentMenu);
        menuBar.add(helpMenu);
        
        setJMenuBar(menuBar);
    }
    
    private JPanel createControlPanel() {
        JPanel panel = new JPanel(new GridBagLayout());
        panel.setBorder(new TitledBorder("üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"));
        panel.setPreferredSize(new Dimension(250, 0));
        
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.fill = GridBagConstraints.HORIZONTAL;
        
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä—ã–±–∞–º–∏
        JButton addTropicalBtn = new JButton("üê† –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–æ–ø–∏—á–µ—Å–∫—É—é —Ä—ã–±—É");
        JButton addGoldfishBtn = new JButton("üêü –î–æ–±–∞–≤–∏—Ç—å –∑–æ–ª–æ—Ç—É—é —Ä—ã–±–∫—É");
        JButton removeFishBtn = new JButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ä—ã–±—É");
        JButton showFishInfoBtn = new JButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä—ã–±–µ");
        
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º
        JButton addEquipmentBtn = new JButton("‚öôÔ∏è –î–æ–±–∞–≤–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ");
        JButton removeEquipmentBtn = new JButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ");
        JButton toggleEquipmentBtn = new JButton("üîå –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å");
        
        // –ö–Ω–æ–ø–∫–∏ –æ–±—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        JButton refreshBtn = new JButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å");
        JButton validateBtn = new JButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å");
        JButton statisticsBtn = new JButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞");
        JButton demoBtn = new JButton("üé≠ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è");
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        gbc.gridy = 0;
        panel.add(addTropicalBtn, gbc);
        gbc.gridy++;
        panel.add(addGoldfishBtn, gbc);
        gbc.gridy++;
        panel.add(removeFishBtn, gbc);
        gbc.gridy++;
        panel.add(showFishInfoBtn, gbc);
        
        gbc.gridy++;
        panel.add(Box.createVerticalStrut(10), gbc);
        
        gbc.gridy++;
        panel.add(addEquipmentBtn, gbc);
        gbc.gridy++;
        panel.add(removeEquipmentBtn, gbc);
        gbc.gridy++;
        panel.add(toggleEquipmentBtn, gbc);
        
        gbc.gridy++;
        panel.add(Box.createVerticalStrut(10), gbc);
        
        gbc.gridy++;
        panel.add(refreshBtn, gbc);
        gbc.gridy++;
        panel.add(validateBtn, gbc);
        gbc.gridy++;
        panel.add(statisticsBtn, gbc);
        gbc.gridy++;
        panel.add(demoBtn, gbc);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        addTropicalBtn.addActionListener(e -> showAddTropicalFishDialog());
        addGoldfishBtn.addActionListener(e -> showAddGoldfishDialog());
        removeFishBtn.addActionListener(e -> removeSelectedFish());
        showFishInfoBtn.addActionListener(e -> showFishInfo());
        
        addEquipmentBtn.addActionListener(e -> showAddEquipmentDialog());
        removeEquipmentBtn.addActionListener(e -> removeSelectedEquipment());
        toggleEquipmentBtn.addActionListener(e -> toggleSelectedEquipment());
        
        refreshBtn.addActionListener(e -> refreshDisplay());
        validateBtn.addActionListener(e -> validateConsistency());
        statisticsBtn.addActionListener(e -> showStatistics());
        demoBtn.addActionListener(e -> runDemo());
        
        return panel;
    }
    
    private JPanel createInfoPanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBorder(new TitledBorder("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–≤–∞—Ä–∏—É–º–µ"));
        
        infoArea = new JTextArea(20, 40);
        infoArea.setEditable(false);
        infoArea.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 12));
        infoArea.setBackground(new Color(240, 248, 255));
        
        JScrollPane scrollPane = new JScrollPane(infoArea);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        
        panel.add(scrollPane, BorderLayout.CENTER);
        
        return panel;
    }
    
    private JPanel createListsPanel() {
        JPanel panel = new JPanel(new GridLayout(2, 1, 5, 5));
        panel.setBorder(new TitledBorder("üìù –°–ø–∏—Å–∫–∏"));
        panel.setPreferredSize(new Dimension(300, 0));
        
        // –°–ø–∏—Å–æ–∫ —Ä—ã–±
        fishListModel = new DefaultListModel<>();
        fishList = new JList<>(fishListModel);
        fishList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        fishList.setCellRenderer(new FishListRenderer());
        
        JScrollPane fishScrollPane = new JScrollPane(fishList);
        fishScrollPane.setBorder(new TitledBorder("üê† –†—ã–±—ã"));
        
        // –°–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        equipmentListModel = new DefaultListModel<>();
        equipmentList = new JList<>(equipmentListModel);
        equipmentList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        equipmentList.setCellRenderer(new EquipmentListRenderer());
        
        JScrollPane equipmentScrollPane = new JScrollPane(equipmentList);
        equipmentScrollPane.setBorder(new TitledBorder("‚öôÔ∏è –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"));
        
        panel.add(fishScrollPane);
        panel.add(equipmentScrollPane);
        
        return panel;
    }
    
    private void setupEventHandlers() {
        // –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –ø–æ —Ä—ã–±–µ
        fishList.addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                refreshInfoArea();
            }
        });
        
        // –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é
        equipmentList.addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                refreshInfoArea();
            }
        });
    }
    
    private void refreshDisplay() {
        refreshFishList();
        refreshEquipmentList();
        refreshInfoArea();
    }
    
    private void refreshFishList() {
        fishListModel.clear();
        List<Fish> fish = aquarium.getAllFish();
        for (Fish f : fish) {
            fishListModel.addElement(f.getName());
        }
    }
    
    private void refreshEquipmentList() {
        equipmentListModel.clear();
        List<Equipment> equipment = aquarium.getAllEquipment();
        for (Equipment e : equipment) {
            equipmentListModel.addElement(e.getName());
        }
    }
    
    private void refreshInfoArea() {
        StringBuilder sb = new StringBuilder();
        sb.append("=== –ê–ö–í–ê–†–ò–£–ú ===\n");
        sb.append("–ù–∞–∑–≤–∞–Ω–∏–µ: ").append(aquarium.getName()).append("\n");
        sb.append("–û–±—ä–µ–º: ").append(aquarium.getVolume()).append(" –ª\n");
        sb.append("–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ").append(aquarium.getLocation()).append("\n\n");
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä—ã–±–µ
        String selectedFish = fishList.getSelectedValue();
        if (selectedFish != null) {
            Fish fish = aquarium.findFish(selectedFish);
            if (fish != null) {
                sb.append("--- –í–´–ë–†–ê–ù–ù–ê–Ø –†–´–ë–ê ---\n");
                sb.append(fish.toString()).append("\n");
                sb.append("–ü–ª–∞–≤–∞–Ω–∏–µ: ").append(fish.swim()).append("\n");
                
                if (fish instanceof Goldfish) {
                    Goldfish goldfish = (Goldfish) fish;
                    sb.append("–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: ").append(goldfish.getAbilities()).append("\n");
                } else if (fish instanceof TropicalFish) {
                    TropicalFish tropicalFish = (TropicalFish) fish;
                    sb.append("–¢–∏–ø –≤–æ–¥—ã: ").append(tropicalFish.getWaterType()).append("\n");
                    sb.append("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ").append(tropicalFish.getTemperature()).append("¬∞C\n");
                }
                sb.append("\n");
            }
        }
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏
        String selectedEquipment = equipmentList.getSelectedValue();
        if (selectedEquipment != null) {
            Equipment equipment = aquarium.findEquipment(selectedEquipment);
            if (equipment != null) {
                sb.append("--- –í–´–ë–†–ê–ù–ù–û–ï –û–ë–û–†–£–î–û–í–ê–ù–ò–ï ---\n");
                sb.append(equipment.toString()).append("\n");
                sb.append("–°—Ç–∞—Ç—É—Å: ").append(equipment.getStatus()).append("\n\n");
            }
        }
        
        // –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        sb.append("--- –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ---\n");
        sb.append(aquarium.getStatistics()).append("\n");
        
        infoArea.setText(sb.toString());
    }
    
    // –î–∏–∞–ª–æ–≥–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä—ã–± –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    private void showAddTropicalFishDialog() {
        AddTropicalFishDialog dialog = new AddTropicalFishDialog(this, aquarium);
        dialog.setVisible(true);
        if (dialog.isOkPressed()) {
            refreshDisplay();
        }
    }
    
    private void showAddGoldfishDialog() {
        AddGoldfishDialog dialog = new AddGoldfishDialog(this, aquarium);
        dialog.setVisible(true);
        if (dialog.isOkPressed()) {
            refreshDisplay();
        }
    }
    
    private void showAddEquipmentDialog() {
        AddEquipmentDialog dialog = new AddEquipmentDialog(this, aquarium);
        dialog.setVisible(true);
        if (dialog.isOkPressed()) {
            refreshDisplay();
        }
    }
    
    // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    private void removeSelectedFish() {
        String selectedFish = fishList.getSelectedValue();
        if (selectedFish != null) {
            int result = JOptionPane.showConfirmDialog(this,
                "–£–¥–∞–ª–∏—Ç—å —Ä—ã–±—É '" + selectedFish + "'?",
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
                JOptionPane.YES_NO_OPTION);
            
            if (result == JOptionPane.YES_OPTION) {
                aquarium.removeFish(selectedFish);
                refreshDisplay();
            }
        } else {
            JOptionPane.showMessageDialog(this, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä—ã–±—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è");
        }
    }
    
    private void removeSelectedEquipment() {
        String selectedEquipment = equipmentList.getSelectedValue();
        if (selectedEquipment != null) {
            int result = JOptionPane.showConfirmDialog(this,
                "–£–¥–∞–ª–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ '" + selectedEquipment + "'?",
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è",
                JOptionPane.YES_NO_OPTION);
            
            if (result == JOptionPane.YES_OPTION) {
                aquarium.removeEquipment(selectedEquipment);
                refreshDisplay();
            }
        } else {
            JOptionPane.showMessageDialog(this, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è");
        }
    }
    
    private void toggleSelectedEquipment() {
        String selectedEquipment = equipmentList.getSelectedValue();
        if (selectedEquipment != null) {
            Equipment equipment = aquarium.findEquipment(selectedEquipment);
            if (equipment != null) {
                String result = equipment.isWorking() ? equipment.turnOff() : equipment.turnOn();
                JOptionPane.showMessageDialog(this, result);
                refreshDisplay();
            }
        } else {
            JOptionPane.showMessageDialog(this, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è");
        }
    }
    
    private void showFishInfo() {
        String selectedFish = fishList.getSelectedValue();
        if (selectedFish != null) {
            Fish fish = aquarium.findFish(selectedFish);
            if (fish != null) {
                JOptionPane.showMessageDialog(this, fish.toString(), 
                    "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä—ã–±–µ", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä—ã–±—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏");
        }
    }
    
    private void validateConsistency() {
        boolean isValid = aquarium.validateConsistency();
        String message = isValid ? 
            "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!" :
            "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤–æ—Å—Ç—å—é –¥–∞–Ω–Ω—ã—Ö";
        
        JOptionPane.showMessageDialog(this, message, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤–æ—Å—Ç–∏", 
            isValid ? JOptionPane.INFORMATION_MESSAGE : JOptionPane.WARNING_MESSAGE);
    }
    
    private void showStatistics() {
        String stats = aquarium.getStatistics();
        JOptionPane.showMessageDialog(this, stats, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–≤–∞—Ä–∏—É–º–∞", 
            JOptionPane.INFORMATION_MESSAGE);
    }
    
    private void runDemo() {
        DemoDialog dialog = new DemoDialog(this, aquarium);
        dialog.setVisible(true);
    }
    
    private void createNewAquarium() {
        CreateAquariumDialog dialog = new CreateAquariumDialog(this);
        dialog.setVisible(true);
        if (dialog.isOkPressed()) {
            aquarium = dialog.getAquarium();
            refreshDisplay();
        }
    }
    
    private void showAboutDialog() {
        String about = "üê† –ü—Ä–æ–≥—Ä–∞–º–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–≤–∞—Ä–∏—É–º–æ–º üê†\n\n" +
                      "–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—ã –û–û–ü:\n" +
                      "‚Ä¢ –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ (TropicalFish, Goldfish ‚Üí Fish)\n" +
                      "‚Ä¢ –ê–≥—Ä–µ–≥–∞—Ü–∏–∏ (Aquarium —Å–æ–¥–µ—Ä–∂–∏—Ç Fish –∏ Equipment)\n" +
                      "‚Ä¢ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏\n" +
                      "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤–æ—Å—Ç–∏\n\n" +
                      "–í–µ—Ä—Å–∏—è: 1.0\n" +
                      "Java: " + System.getProperty("java.version");
        
        JOptionPane.showMessageDialog(this, about, "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", 
            JOptionPane.INFORMATION_MESSAGE);
    }
    
    // –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ä–µ–Ω–¥–µ—Ä–µ—Ä—ã –¥–ª—è —Å–ø–∏—Å–∫–æ–≤
    private class FishListRenderer extends DefaultListCellRenderer {
        @Override
        public Component getListCellRendererComponent(JList<?> list, Object value, int index,
                boolean isSelected, boolean cellHasFocus) {
            super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            
            if (value != null) {
                Fish fish = aquarium.findFish(value.toString());
                if (fish != null) {
                    String icon = fish instanceof Goldfish ? "üêü" : "üê†";
                    setText(icon + " " + value.toString());
                }
            }
            
            return this;
        }
    }
    
    private class EquipmentListRenderer extends DefaultListCellRenderer {
        @Override
        public Component getListCellRendererComponent(JList<?> list, Object value, int index,
                boolean isSelected, boolean cellHasFocus) {
            super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            
            if (value != null) {
                Equipment equipment = aquarium.findEquipment(value.toString());
                if (equipment != null) {
                    String icon = equipment.isWorking() ? "üü¢" : "üî¥";
                    setText(icon + " " + value.toString());
                }
            }
            
            return this;
        }
    }
    
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            try {
                new AquariumGUI().setVisible(true);
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, 
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: " + e.getMessage(),
                    "–û—à–∏–±–∫–∞", JOptionPane.ERROR_MESSAGE);
            }
        });
    }
}