package aquarium;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.List;

/**
 * –î–∏–∞–ª–æ–≥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
 */
public class DemoDialog extends JDialog {
    private Aquarium aquarium;
    private JTextArea demoArea;
    private JButton nextStepButton;
    private JButton runAllButton;
    private JButton closeButton;
    private int currentStep = 0;
    
    private final String[] demoSteps = {
        "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ä—ã–±",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏—Ö —Ä—ã–±",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –∑–æ–ª–æ—Ç—ã—Ö —Ä—ã–±–æ–∫",
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º",
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤–æ—Å—Ç–∏",
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–≤–∞—Ä–∏—É–º–∞"
    };
    
    public DemoDialog(Frame parent, Aquarium aquarium) {
        super(parent, "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã", true);
        this.aquarium = aquarium;
        
        initializeComponents();
        setupLayout();
        setupEventHandlers();
        
        setSize(600, 500);
        setLocationRelativeTo(parent);
        
        // –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
        showWelcome();
    }
    
    private void initializeComponents() {
        demoArea = new JTextArea(20, 50);
        demoArea.setEditable(false);
        demoArea.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 12));
        demoArea.setBackground(new Color(240, 248, 255));
        
        nextStepButton = new JButton("–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥");
        runAllButton = new JButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ");
        closeButton = new JButton("–ó–∞–∫—Ä—ã—Ç—å");
        
        nextStepButton.setPreferredSize(new Dimension(120, 30));
        runAllButton.setPreferredSize(new Dimension(120, 30));
        closeButton.setPreferredSize(new Dimension(100, 30));
    }
    
    private void setupLayout() {
        setLayout(new BorderLayout());
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        JLabel titleLabel = new JLabel("üé≠ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã '–ê–∫–≤–∞—Ä–∏—É–º'");
        titleLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 16));
        titleLabel.setForeground(new Color(0, 100, 200));
        titleLabel.setHorizontalAlignment(SwingConstants.CENTER);
        titleLabel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        
        add(titleLabel, BorderLayout.NORTH);
        
        // –û–±–ª–∞—Å—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        JScrollPane scrollPane = new JScrollPane(demoArea);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrollPane.setBorder(BorderFactory.createTitledBorder("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"));
        
        add(scrollPane, BorderLayout.CENTER);
        
        // –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫
        JPanel buttonPanel = new JPanel(new FlowLayout());
        buttonPanel.add(nextStepButton);
        buttonPanel.add(runAllButton);
        buttonPanel.add(closeButton);
        buttonPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        
        add(buttonPanel, BorderLayout.SOUTH);
    }
    
    private void setupEventHandlers() {
        nextStepButton.addActionListener(e -> runNextStep());
        runAllButton.addActionListener(e -> runAllSteps());
        closeButton.addActionListener(e -> dispose());
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ Escape
        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW)
            .put(KeyStroke.getKeyStroke("ESCAPE"), "close");
        getRootPane().getActionMap().put("close", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        });
    }
    
    private void showWelcome() {
        StringBuilder sb = new StringBuilder();
        sb.append("=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–û–ì–†–ê–ú–ú–´ '–ê–ö–í–ê–†–ò–£–ú' ===\n\n");
        sb.append("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã!\n\n");
        sb.append("–≠—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—ã –û–û–ü:\n");
        sb.append("‚Ä¢ –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ (TropicalFish, Goldfish ‚Üí Fish)\n");
        sb.append("‚Ä¢ –ê–≥—Ä–µ–≥–∞—Ü–∏–∏ (Aquarium —Å–æ–¥–µ—Ä–∂–∏—Ç Fish –∏ Equipment)\n");
        sb.append("‚Ä¢ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏\n");
        sb.append("‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤–æ—Å—Ç–∏\n\n");
        sb.append("–ù–∞–∂–º–∏—Ç–µ '–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥' –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏\n");
        sb.append("–∏–ª–∏ '–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ' –¥–ª—è –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏.\n\n");
        sb.append("==========================================\n\n");
        
        demoArea.setText(sb.toString());
        currentStep = 0;
    }
    
    private void runNextStep() {
        if (currentStep >= demoSteps.length) {
            showCompletion();
            return;
        }
        
        String step = demoSteps[currentStep];
        appendToDemo("--- " + step + " ---\n");
        
        switch (currentStep) {
            case 0:
                demonstrateSwimming();
                break;
            case 1:
                checkTropicalCompatibility();
                break;
            case 2:
                checkGoldfishAbilities();
                break;
            case 3:
                manageEquipment();
                break;
            case 4:
                validateConsistency();
                break;
            case 5:
                showStatistics();
                break;
        }
        
        currentStep++;
        
        if (currentStep >= demoSteps.length) {
            nextStepButton.setText("–ó–∞–≤–µ—Ä—à–∏—Ç—å");
        }
    }
    
    private void runAllSteps() {
        demoArea.setText("");
        showWelcome();
        currentStep = 0;
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —à–∞–≥–∏ –ø–æ–¥—Ä—è–¥
        for (int i = 0; i < demoSteps.length; i++) {
            runNextStep();
            try {
                Thread.sleep(500); // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
        
        showCompletion();
    }
    
    private void demonstrateSwimming() {
        List<Fish> fish = aquarium.getAllFish();
        if (fish.isEmpty()) {
            appendToDemo("–†—ã–± –≤ –∞–∫–≤–∞—Ä–∏—É–º–µ –Ω–µ—Ç.\n");
        } else {
            appendToDemo("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞–≤–∞–Ω–∏—è:\n");
            for (Fish f : fish) {
                appendToDemo("‚Ä¢ " + f.swim() + "\n");
            }
        }
        appendToDemo("\n");
    }
    
    private void checkTropicalCompatibility() {
        List<Fish> fish = aquarium.getAllFish();
        List<TropicalFish> tropicalFish = fish.stream()
            .filter(f -> f instanceof TropicalFish)
            .map(f -> (TropicalFish) f)
            .toList();
        
        if (tropicalFish.size() < 2) {
            appendToDemo("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏—Ö —Ä—ã–± –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.\n");
        } else {
            appendToDemo("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏—Ö —Ä—ã–±:\n");
            for (int i = 0; i < tropicalFish.size(); i++) {
                for (int j = i + 1; j < tropicalFish.size(); j++) {
                    TropicalFish fish1 = tropicalFish.get(i);
                    TropicalFish fish2 = tropicalFish.get(j);
                    boolean compatible = fish1.isCompatibleWith(fish2);
                    appendToDemo(String.format("‚Ä¢ %s –∏ %s - %s\n", 
                        fish1.getName(), fish2.getName(), 
                        compatible ? "—Å–æ–≤–º–µ—Å—Ç–∏–º—ã" : "–Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã"));
                }
            }
        }
        appendToDemo("\n");
    }
    
    private void checkGoldfishAbilities() {
        List<Fish> fish = aquarium.getAllFish();
        List<Goldfish> goldfish = fish.stream()
            .filter(f -> f instanceof Goldfish)
            .map(f -> (Goldfish) f)
            .toList();
        
        if (goldfish.isEmpty()) {
            appendToDemo("–ó–æ–ª–æ—Ç—ã—Ö —Ä—ã–±–æ–∫ –≤ –∞–∫–≤–∞—Ä–∏—É–º–µ –Ω–µ—Ç.\n");
        } else {
            appendToDemo("–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∑–æ–ª–æ—Ç—ã—Ö —Ä—ã–±–æ–∫:\n");
            for (Goldfish gf : goldfish) {
                appendToDemo("‚Ä¢ " + gf.getName() + ": " + gf.getAbilities() + "\n");
            }
        }
        appendToDemo("\n");
    }
    
    private void manageEquipment() {
        List<Equipment> equipment = aquarium.getAllEquipment();
        if (equipment.isEmpty()) {
            appendToDemo("–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≤ –∞–∫–≤–∞—Ä–∏—É–º–µ –Ω–µ—Ç.\n");
        } else {
            appendToDemo("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º:\n");
            for (Equipment e : equipment) {
                String action = e.isWorking() ? e.turnOff() : e.turnOn();
                appendToDemo("‚Ä¢ " + action + "\n");
            }
        }
        appendToDemo("\n");
    }
    
    private void validateConsistency() {
        appendToDemo("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤–æ—Å—Ç–∏:\n");
        boolean isValid = aquarium.validateConsistency();
        appendToDemo(isValid ? 
            "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n" : 
            "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏\n");
        appendToDemo("\n");
    }
    
    private void showStatistics() {
        appendToDemo("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–≤–∞—Ä–∏—É–º–∞:\n");
        appendToDemo(aquarium.getStatistics() + "\n");
        appendToDemo("\n");
    }
    
    private void showCompletion() {
        appendToDemo("==========================================\n");
        appendToDemo("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê! üéâ\n\n");
        appendToDemo("–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã:\n");
        appendToDemo("‚úÖ –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤\n");
        appendToDemo("‚úÖ –ê–≥—Ä–µ–≥–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤\n");
        appendToDemo("‚úÖ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏\n");
        appendToDemo("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤–æ—Å—Ç–∏\n");
        appendToDemo("‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n\n");
        appendToDemo("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã '–ê–∫–≤–∞—Ä–∏—É–º'!\n");
        
        nextStepButton.setEnabled(false);
        runAllButton.setEnabled(false);
    }
    
    private void appendToDemo(String text) {
        demoArea.append(text);
        demoArea.setCaretPosition(demoArea.getDocument().getLength());
    }
}