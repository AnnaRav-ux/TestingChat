package aquarium;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;

/**
 * –î–∏–∞–ª–æ–≥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫–≤–∞—Ä–∏—É–º–∞
 */
public class CreateAquariumDialog extends JDialog {
    private boolean okPressed = false;
    private Aquarium aquarium;
    
    private JTextField nameField;
    private JSpinner volumeSpinner;
    private JTextField locationField;
    
    public CreateAquariumDialog(Frame parent) {
        super(parent, "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–≤–∞—Ä–∏—É–º", true);
        
        initializeComponents();
        setupLayout();
        setupEventHandlers();
        
        setSize(400, 250);
        setLocationRelativeTo(parent);
    }
    
    private void initializeComponents() {
        // –ü–æ–ª—è –≤–≤–æ–¥–∞
        nameField = new JTextField(20);
        volumeSpinner = new JSpinner(new SpinnerNumberModel(50.0, 1.0, 1000.0, 0.1));
        locationField = new JTextField(20);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        nameField.setText("–ú–æ–π –∞–∫–≤–∞—Ä–∏—É–º");
        locationField.setText("–ì–æ—Å—Ç–∏–Ω–∞—è");
    }
    
    private void setupLayout() {
        setLayout(new BorderLayout());
        
        // –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å –ø–æ–ª—è–º–∏
        JPanel mainPanel = new JPanel(new GridBagLayout());
        mainPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.anchor = GridBagConstraints.WEST;
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        JLabel titleLabel = new JLabel("üè† –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫–≤–∞—Ä–∏—É–º–∞");
        titleLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 16));
        titleLabel.setForeground(new Color(0, 100, 200));
        gbc.gridx = 0; gbc.gridy = 0; gbc.gridwidth = 2;
        gbc.insets = new Insets(0, 0, 15, 0);
        mainPanel.add(titleLabel, gbc);
        
        gbc.gridwidth = 1;
        gbc.insets = new Insets(5, 5, 5, 5);
        
        // –ü–æ–ª—è –≤–≤–æ–¥–∞
        gbc.gridx = 0; gbc.gridy = 1;
        mainPanel.add(new JLabel("–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫–≤–∞—Ä–∏—É–º–∞:"), gbc);
        gbc.gridx = 1;
        mainPanel.add(nameField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 2;
        mainPanel.add(new JLabel("–û–±—ä–µ–º (–ª–∏—Ç—Ä—ã):"), gbc);
        gbc.gridx = 1;
        mainPanel.add(volumeSpinner, gbc);
        
        gbc.gridx = 0; gbc.gridy = 3;
        mainPanel.add(new JLabel("–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:"), gbc);
        gbc.gridx = 1;
        mainPanel.add(locationField, gbc);
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        JPanel infoPanel = new JPanel(new BorderLayout());
        infoPanel.setBorder(BorderFactory.createTitledBorder("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"));
        infoPanel.setBackground(new Color(255, 248, 220));
        
        JLabel infoLabel = new JLabel("<html><body style='width: 300px'>" +
            "<b>–°–æ–≤–µ—Ç—ã –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∞–∫–≤–∞—Ä–∏—É–º–∞:</b><br>" +
            "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º<br>" +
            "‚Ä¢ –û–±—ä–µ–º –≤–ª–∏—è–µ—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—ã–±<br>" +
            "‚Ä¢ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º<br>" +
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –æ–±—ä–µ–º: 50-200 –ª–∏—Ç—Ä–æ–≤" +
            "</body></html>");
        infoLabel.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 11));
        
        infoPanel.add(infoLabel, BorderLayout.CENTER);
        
        gbc.gridx = 0; gbc.gridy = 4; gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(10, 0, 0, 0);
        mainPanel.add(infoPanel, gbc);
        
        add(mainPanel, BorderLayout.CENTER);
        
        // –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫
        JPanel buttonPanel = new JPanel(new FlowLayout());
        JButton okButton = new JButton("–°–æ–∑–¥–∞—Ç—å");
        JButton cancelButton = new JButton("–û—Ç–º–µ–Ω–∞");
        
        okButton.setPreferredSize(new Dimension(100, 30));
        cancelButton.setPreferredSize(new Dimension(100, 30));
        
        buttonPanel.add(okButton);
        buttonPanel.add(cancelButton);
        
        add(buttonPanel, BorderLayout.SOUTH);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        okButton.addActionListener(e -> {
            if (validateInput()) {
                createAquarium();
                okPressed = true;
                dispose();
            }
        });
        
        cancelButton.addActionListener(e -> dispose());
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –∏ Escape
        getRootPane().setDefaultButton(okButton);
        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW)
            .put(KeyStroke.getKeyStroke("ESCAPE"), "cancel");
        getRootPane().getActionMap().put("cancel", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        });
    }
    
    private void setupEventHandlers() {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
        nameField.addFocusListener(new java.awt.event.FocusAdapter() {
            @Override
            public void focusLost(java.awt.event.FocusEvent e) {
                if (locationField.getText().trim().isEmpty()) {
                    String name = nameField.getText().trim();
                    if (!name.isEmpty()) {
                        locationField.setText("–ì–æ—Å—Ç–∏–Ω–∞—è");
                    }
                }
            }
        });
    }
    
    private boolean validateInput() {
        String name = nameField.getText().trim();
        String location = locationField.getText().trim();
        double volume = (Double) volumeSpinner.getValue();
        
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫–≤–∞—Ä–∏—É–º–∞", 
                "–û—à–∏–±–∫–∞", JOptionPane.ERROR_MESSAGE);
            nameField.requestFocus();
            return false;
        }
        
        if (location.isEmpty()) {
            JOptionPane.showMessageDialog(this, "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∞–∫–≤–∞—Ä–∏—É–º–∞", 
                "–û—à–∏–±–∫–∞", JOptionPane.ERROR_MESSAGE);
            locationField.requestFocus();
            return false;
        }
        
        if (volume <= 0) {
            JOptionPane.showMessageDialog(this, "–û–±—ä–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º", 
                "–û—à–∏–±–∫–∞", JOptionPane.ERROR_MESSAGE);
            volumeSpinner.requestFocus();
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
        if (name.equals(location)) {
            JOptionPane.showMessageDialog(this, 
                "–ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫–≤–∞—Ä–∏—É–º–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º", 
                "–û—à–∏–±–∫–∞", JOptionPane.ERROR_MESSAGE);
            nameField.requestFocus();
            return false;
        }
        
        return true;
    }
    
    private void createAquarium() {
        String name = nameField.getText().trim();
        double volume = (Double) volumeSpinner.getValue();
        String location = locationField.getText().trim();
        
        aquarium = new Aquarium(name, volume, location);
        
        JOptionPane.showMessageDialog(this, 
            String.format("–ê–∫–≤–∞—Ä–∏—É–º '%s' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n" +
                "–û–±—ä–µ–º: %.1f –ª\n" +
                "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: %s", name, volume, location), 
            "–£—Å–ø–µ—Ö", JOptionPane.INFORMATION_MESSAGE);
    }
    
    public boolean isOkPressed() {
        return okPressed;
    }
    
    public Aquarium getAquarium() {
        return aquarium;
    }
}