package aquarium;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * –î–∏–∞–ª–æ–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–æ–ø–∏—á–µ—Å–∫–æ–π —Ä—ã–±—ã
 */
public class AddTropicalFishDialog extends JDialog {
    private Aquarium aquarium;
    private boolean okPressed = false;
    
    private JTextField nameField;
    private JTextField speciesField;
    private JSpinner ageSpinner;
    private JSpinner sizeSpinner;
    private JComboBox<String> waterTypeCombo;
    private JSpinner temperatureSpinner;
    
    public AddTropicalFishDialog(Frame parent, Aquarium aquarium) {
        super(parent, "–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–æ–ø–∏—á–µ—Å–∫—É—é —Ä—ã–±—É", true);
        this.aquarium = aquarium;
        
        initializeComponents();
        setupLayout();
        setupEventHandlers();
        
        setSize(400, 300);
        setLocationRelativeTo(parent);
    }
    
    private void initializeComponents() {
        // –ü–æ–ª—è –≤–≤–æ–¥–∞
        nameField = new JTextField(20);
        speciesField = new JTextField(20);
        ageSpinner = new JSpinner(new SpinnerNumberModel(1, 1, 120, 1));
        sizeSpinner = new JSpinner(new SpinnerNumberModel(1.0, 0.1, 50.0, 0.1));
        
        // –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ç–∏–ø–∞ –≤–æ–¥—ã
        waterTypeCombo = new JComboBox<>(new String[]{"–ø—Ä–µ—Å–Ω–∞—è", "—Å–æ–ª–µ–Ω–∞—è"});
        waterTypeCombo.setSelectedIndex(0);
        
        // –°–ø–∏–Ω–Ω–µ—Ä –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        temperatureSpinner = new JSpinner(new SpinnerNumberModel(25, 15, 35, 1));
    }
    
    private void setupLayout() {
        setLayout(new BorderLayout());
        
        // –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å –ø–æ–ª—è–º–∏
        JPanel mainPanel = new JPanel(new GridBagLayout());
        mainPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.anchor = GridBagConstraints.WEST;
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        JLabel titleLabel = new JLabel("üê† –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–æ–ø–∏—á–µ—Å–∫–æ–π —Ä—ã–±—ã");
        titleLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 16));
        titleLabel.setForeground(new Color(0, 100, 200));
        gbc.gridx = 0; gbc.gridy = 0; gbc.gridwidth = 2;
        gbc.insets = new Insets(0, 0, 15, 0);
        mainPanel.add(titleLabel, gbc);
        
        gbc.gridwidth = 1;
        gbc.insets = new Insets(5, 5, 5, 5);
        
        // –ü–æ–ª—è –≤–≤–æ–¥–∞
        gbc.gridx = 0; gbc.gridy = 1;
        mainPanel.add(new JLabel("–ò–º—è —Ä—ã–±—ã:"), gbc);
        gbc.gridx = 1;
        mainPanel.add(nameField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 2;
        mainPanel.add(new JLabel("–í–∏–¥ —Ä—ã–±—ã:"), gbc);
        gbc.gridx = 1;
        mainPanel.add(speciesField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 3;
        mainPanel.add(new JLabel("–í–æ–∑—Ä–∞—Å—Ç (–º–µ—Å—è—Ü–µ–≤):"), gbc);
        gbc.gridx = 1;
        mainPanel.add(ageSpinner, gbc);
        
        gbc.gridx = 0; gbc.gridy = 4;
        mainPanel.add(new JLabel("–†–∞–∑–º–µ—Ä (—Å–º):"), gbc);
        gbc.gridx = 1;
        mainPanel.add(sizeSpinner, gbc);
        
        gbc.gridx = 0; gbc.gridy = 5;
        mainPanel.add(new JLabel("–¢–∏–ø –≤–æ–¥—ã:"), gbc);
        gbc.gridx = 1;
        mainPanel.add(waterTypeCombo, gbc);
        
        gbc.gridx = 0; gbc.gridy = 6;
        mainPanel.add(new JLabel("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C):"), gbc);
        gbc.gridx = 1;
        mainPanel.add(temperatureSpinner, gbc);
        
        add(mainPanel, BorderLayout.CENTER);
        
        // –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫
        JPanel buttonPanel = new JPanel(new FlowLayout());
        JButton okButton = new JButton("–î–æ–±–∞–≤–∏—Ç—å");
        JButton cancelButton = new JButton("–û—Ç–º–µ–Ω–∞");
        
        okButton.setPreferredSize(new Dimension(100, 30));
        cancelButton.setPreferredSize(new Dimension(100, 30));
        
        buttonPanel.add(okButton);
        buttonPanel.add(cancelButton);
        
        add(buttonPanel, BorderLayout.SOUTH);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        okButton.addActionListener(e -> {
            if (validateInput()) {
                addFish();
                okPressed = true;
                dispose();
            }
        });
        
        cancelButton.addActionListener(e -> dispose());
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –∏ Escape
        getRootPane().setDefaultButton(okButton);
        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW)
            .put(KeyStroke.getKeyStroke("ESCAPE"), "cancel");
        getRootPane().getActionMap().put("cancel", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        });
    }
    
    private void setupEventHandlers() {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∏–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        nameField.addFocusListener(new java.awt.event.FocusAdapter() {
            @Override
            public void focusLost(java.awt.event.FocusEvent e) {
                if (speciesField.getText().trim().isEmpty()) {
                    String name = nameField.getText().trim();
                    if (!name.isEmpty()) {
                        speciesField.setText("–¢—Ä–æ–ø–∏—á–µ—Å–∫–∞—è —Ä—ã–±–∞");
                    }
                }
            }
        });
    }
    
    private boolean validateInput() {
        String name = nameField.getText().trim();
        String species = speciesField.getText().trim();
        
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä—ã–±—ã", "–û—à–∏–±–∫–∞", JOptionPane.ERROR_MESSAGE);
            nameField.requestFocus();
            return false;
        }
        
        if (species.isEmpty()) {
            JOptionPane.showMessageDialog(this, "–í–≤–µ–¥–∏—Ç–µ –≤–∏–¥ —Ä—ã–±—ã", "–û—à–∏–±–∫–∞", JOptionPane.ERROR_MESSAGE);
            speciesField.requestFocus();
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ä—ã–±—ã —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        if (aquarium.findFish(name) != null) {
            JOptionPane.showMessageDialog(this, "–†—ã–±–∞ —Å –∏–º–µ–Ω–µ–º '" + name + "' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", 
                "–û—à–∏–±–∫–∞", JOptionPane.ERROR_MESSAGE);
            nameField.requestFocus();
            return false;
        }
        
        return true;
    }
    
    private void addFish() {
        String name = nameField.getText().trim();
        String species = speciesField.getText().trim();
        int age = (Integer) ageSpinner.getValue();
        double size = (Double) sizeSpinner.getValue();
        String waterType = (String) waterTypeCombo.getSelectedItem();
        int temperature = (Integer) temperatureSpinner.getValue();
        
        TropicalFish fish = new TropicalFish(name, species, age, size, waterType, temperature);
        boolean success = aquarium.addFish(fish);
        
        if (success) {
            JOptionPane.showMessageDialog(this, 
                "–¢—Ä–æ–ø–∏—á–µ—Å–∫–∞—è —Ä—ã–±–∞ '" + name + "' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", 
                "–£—Å–ø–µ—Ö", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, 
                "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä—ã–±—É", 
                "–û—à–∏–±–∫–∞", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public boolean isOkPressed() {
        return okPressed;
    }
}