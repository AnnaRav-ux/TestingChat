package aquarium;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;

/**
 * –î–∏–∞–ª–æ–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–æ–ª–æ—Ç–æ–π —Ä—ã–±–∫–∏
 */
public class AddGoldfishDialog extends JDialog {
    private Aquarium aquarium;
    private boolean okPressed = false;
    
    private JTextField nameField;
    private JTextField speciesField;
    private JSpinner ageSpinner;
    private JSpinner sizeSpinner;
    private JTextField colorField;
    private JCheckBox isGoldenCheckBox;
    
    public AddGoldfishDialog(Frame parent, Aquarium aquarium) {
        super(parent, "–î–æ–±–∞–≤–∏—Ç—å –∑–æ–ª–æ—Ç—É—é —Ä—ã–±–∫—É", true);
        this.aquarium = aquarium;
        
        initializeComponents();
        setupLayout();
        setupEventHandlers();
        
        setSize(400, 300);
        setLocationRelativeTo(parent);
    }
    
    private void initializeComponents() {
        // –ü–æ–ª—è –≤–≤–æ–¥–∞
        nameField = new JTextField(20);
        speciesField = new JTextField(20);
        ageSpinner = new JSpinner(new SpinnerNumberModel(1, 1, 120, 1));
        sizeSpinner = new JSpinner(new SpinnerNumberModel(1.0, 0.1, 50.0, 0.1));
        colorField = new JTextField(20);
        isGoldenCheckBox = new JCheckBox("–Ø–≤–ª—è–µ—Ç—Å—è –∑–æ–ª–æ—Ç–æ–π —Ä—ã–±–∫–æ–π");
        isGoldenCheckBox.setSelected(true);
    }
    
    private void setupLayout() {
        setLayout(new BorderLayout());
        
        // –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å –ø–æ–ª—è–º–∏
        JPanel mainPanel = new JPanel(new GridBagLayout());
        mainPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.anchor = GridBagConstraints.WEST;
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        JLabel titleLabel = new JLabel("üêü –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–æ–ª–æ—Ç–æ–π —Ä—ã–±–∫–∏");
        titleLabel.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 16));
        titleLabel.setForeground(new Color(255, 165, 0));
        gbc.gridx = 0; gbc.gridy = 0; gbc.gridwidth = 2;
        gbc.insets = new Insets(0, 0, 15, 0);
        mainPanel.add(titleLabel, gbc);
        
        gbc.gridwidth = 1;
        gbc.insets = new Insets(5, 5, 5, 5);
        
        // –ü–æ–ª—è –≤–≤–æ–¥–∞
        gbc.gridx = 0; gbc.gridy = 1;
        mainPanel.add(new JLabel("–ò–º—è —Ä—ã–±–∫–∏:"), gbc);
        gbc.gridx = 1;
        mainPanel.add(nameField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 2;
        mainPanel.add(new JLabel("–í–∏–¥ —Ä—ã–±–∫–∏:"), gbc);
        gbc.gridx = 1;
        mainPanel.add(speciesField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 3;
        mainPanel.add(new JLabel("–í–æ–∑—Ä–∞—Å—Ç (–º–µ—Å—è—Ü–µ–≤):"), gbc);
        gbc.gridx = 1;
        mainPanel.add(ageSpinner, gbc);
        
        gbc.gridx = 0; gbc.gridy = 4;
        mainPanel.add(new JLabel("–†–∞–∑–º–µ—Ä (—Å–º):"), gbc);
        gbc.gridx = 1;
        mainPanel.add(sizeSpinner, gbc);
        
        gbc.gridx = 0; gbc.gridy = 5;
        mainPanel.add(new JLabel("–¶–≤–µ—Ç —Ä—ã–±–∫–∏:"), gbc);
        gbc.gridx = 1;
        mainPanel.add(colorField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 6; gbc.gridwidth = 2;
        mainPanel.add(isGoldenCheckBox, gbc);
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        JPanel infoPanel = new JPanel(new BorderLayout());
        infoPanel.setBorder(BorderFactory.createTitledBorder("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"));
        infoPanel.setBackground(new Color(255, 248, 220));
        
        JLabel infoLabel = new JLabel("<html><body style='width: 300px'>" +
            "<b>–ó–æ–ª–æ—Ç—ã–µ —Ä—ã–±–∫–∏:</b><br>" +
            "‚Ä¢ –ú–æ–≥—É—Ç –∏—Å–ø–æ–ª–Ω—è—Ç—å –∂–µ–ª–∞–Ω–∏—è (–µ—Å–ª–∏ —Å—Ç–∞—Ä—à–µ 12 –º–µ—Å—è—Ü–µ–≤)<br>" +
            "‚Ä¢ –û–±—ã—á–Ω—ã–µ —Ä—ã–±–∫–∏ –Ω–µ –∏–º–µ—é—Ç –æ—Å–æ–±—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π<br>" +
            "‚Ä¢ –¶–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±—ã–º: –∑–æ–ª–æ—Ç–æ–π, –æ—Ä–∞–Ω–∂–µ–≤—ã–π, –∫—Ä–∞—Å–Ω—ã–π –∏ —Ç.–¥." +
            "</body></html>");
        infoLabel.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 11));
        
        infoPanel.add(infoLabel, BorderLayout.CENTER);
        
        gbc.gridx = 0; gbc.gridy = 7; gbc.gridwidth = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(10, 0, 0, 0);
        mainPanel.add(infoPanel, gbc);
        
        add(mainPanel, BorderLayout.CENTER);
        
        // –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫
        JPanel buttonPanel = new JPanel(new FlowLayout());
        JButton okButton = new JButton("–î–æ–±–∞–≤–∏—Ç—å");
        JButton cancelButton = new JButton("–û—Ç–º–µ–Ω–∞");
        
        okButton.setPreferredSize(new Dimension(100, 30));
        cancelButton.setPreferredSize(new Dimension(100, 30));
        
        buttonPanel.add(okButton);
        buttonPanel.add(cancelButton);
        
        add(buttonPanel, BorderLayout.SOUTH);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        okButton.addActionListener(e -> {
            if (validateInput()) {
                addFish();
                okPressed = true;
                dispose();
            }
        });
        
        cancelButton.addActionListener(e -> dispose());
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –∏ Escape
        getRootPane().setDefaultButton(okButton);
        getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW)
            .put(KeyStroke.getKeyStroke("ESCAPE"), "cancel");
        getRootPane().getActionMap().put("cancel", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        });
    }
    
    private void setupEventHandlers() {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–∏–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        nameField.addFocusListener(new java.awt.event.FocusAdapter() {
            @Override
            public void focusLost(java.awt.event.FocusEvent e) {
                if (speciesField.getText().trim().isEmpty()) {
                    String name = nameField.getText().trim();
                    if (!name.isEmpty()) {
                        speciesField.setText("–ó–æ–ª–æ—Ç–∞—è —Ä—ã–±–∫–∞");
                    }
                }
            }
        });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
        colorField.addFocusListener(new java.awt.event.FocusAdapter() {
            @Override
            public void focusLost(java.awt.event.FocusEvent e) {
                if (colorField.getText().trim().isEmpty()) {
                    colorField.setText(isGoldenCheckBox.isSelected() ? "–∑–æ–ª–æ—Ç–æ–π" : "–æ—Ä–∞–Ω–∂–µ–≤—ã–π");
                }
            }
        });
        
        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–∏–ø–∞ —Ä—ã–±–∫–∏
        isGoldenCheckBox.addActionListener(e -> {
            if (colorField.getText().trim().isEmpty()) {
                colorField.setText(isGoldenCheckBox.isSelected() ? "–∑–æ–ª–æ—Ç–æ–π" : "–æ—Ä–∞–Ω–∂–µ–≤—ã–π");
            }
        });
    }
    
    private boolean validateInput() {
        String name = nameField.getText().trim();
        String species = speciesField.getText().trim();
        String color = colorField.getText().trim();
        
        if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä—ã–±–∫–∏", "–û—à–∏–±–∫–∞", JOptionPane.ERROR_MESSAGE);
            nameField.requestFocus();
            return false;
        }
        
        if (species.isEmpty()) {
            JOptionPane.showMessageDialog(this, "–í–≤–µ–¥–∏—Ç–µ –≤–∏–¥ —Ä—ã–±–∫–∏", "–û—à–∏–±–∫–∞", JOptionPane.ERROR_MESSAGE);
            speciesField.requestFocus();
            return false;
        }
        
        if (color.isEmpty()) {
            JOptionPane.showMessageDialog(this, "–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç —Ä—ã–±–∫–∏", "–û—à–∏–±–∫–∞", JOptionPane.ERROR_MESSAGE);
            colorField.requestFocus();
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ä—ã–±—ã —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        if (aquarium.findFish(name) != null) {
            JOptionPane.showMessageDialog(this, "–†—ã–±–∫–∞ —Å –∏–º–µ–Ω–µ–º '" + name + "' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", 
                "–û—à–∏–±–∫–∞", JOptionPane.ERROR_MESSAGE);
            nameField.requestFocus();
            return false;
        }
        
        return true;
    }
    
    private void addFish() {
        String name = nameField.getText().trim();
        String species = speciesField.getText().trim();
        int age = (Integer) ageSpinner.getValue();
        double size = (Double) sizeSpinner.getValue();
        String color = colorField.getText().trim();
        boolean isGolden = isGoldenCheckBox.isSelected();
        
        Goldfish fish = new Goldfish(name, species, age, size, color, isGolden);
        boolean success = aquarium.addFish(fish);
        
        if (success) {
            String message = "–ó–æ–ª–æ—Ç–∞—è —Ä—ã–±–∫–∞ '" + name + "' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!";
            if (isGolden && age >= 12) {
                message += "\n\n‚ú® –≠—Ç–∞ —Ä—ã–±–∫–∞ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª–Ω—è—Ç—å –∂–µ–ª–∞–Ω–∏—è!";
            }
            
            JOptionPane.showMessageDialog(this, message, "–£—Å–ø–µ—Ö", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä—ã–±–∫—É", 
                "–û—à–∏–±–∫–∞", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public boolean isOkPressed() {
        return okPressed;
    }
}